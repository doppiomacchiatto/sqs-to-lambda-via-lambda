Description: |
  Creates a Lambda function that invokes other Lambda functions with
  SQS events.

Parameters:
  QueueToFunctionMapping:
    Description: |
      The list of SQS queue URLs and corresponding Lambda function
      names. Separate queue urls, function names, and pairs with commas:
      <queue_url_1>,<function_1>,<queue_url_2>,<function_2>.
      There must be an odd number of commas.
    Type: String

  Frequency:
    Description: |
      How often you want the specified SQS queues checked. If you choose
      "Continuous", a Lambda function will be constantly running, waiting for
      items in the queue. If you choose "1Minute", the Lambda function will
      only run every minute and check every queue. This can result in drastically
      reduced Lambda cost, at the expense of waiting up to a minute for items
      to become visibile in the queue before being processed by your functions.
    Type: String
    Default: Continuous
    AllowedValues:
      - Continuous
      - 1Minute

Outputs: {}

Conditions:
  Enable1MinutePoll: !Equals [!Ref Frequency, 1Minute]
  Enable5MinutePoll: !Equals [!Ref Frequency, Continuous]

Resources:

  ### IAM Setup

  SQSToLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: lambda-to-sqs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                Resource:
                  # TODO: Should we list the configured queues and functions here?
                  # Will blank ones cause any problems? One problem is that queues
                  # are supplied with URLs, and functions with names. (No ARNs.)
                  - "*"
              - Effect: Allow
                Action:
                  - lambda:Invoke*
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  ### CloudWatch Event

  CloudWatchEvent1Minute:
    Type: AWS::Events::Rule
    Condition: Enable1MinutePoll
    Properties:
      ScheduleExpression: cron(* * * * ? *)
      Targets:
        - Arn: !GetAtt [SQSToLambdaFunction, Arn]
          Id: !Ref SQSToLambdaFunction

  CloudWatchEvent5Minute:
    Type: AWS::Events::Rule
    Condition: Enable5MinutePoll
    Properties:
      ScheduleExpression: cron(0/5 * * * ? *)
      Targets:
        - Arn: !GetAtt [SQSToLambdaFunction, Arn]
          Id: !Ref SQSToLambdaFunction

  ### Lambda Function

  SQSToLambdaFunctionPermission1Minute:
    Type: AWS::Lambda::Permission
    Condition: Enable1MinutePoll
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SQSToLambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [CloudWatchEvent1Minute, Arn]

  SQSToLambdaFunctionPermission5Minute:
    Type: AWS::Lambda::Permission
    Condition: Enable5MinutePoll
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SQSToLambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [CloudWatchEvent5Minute, Arn]

  SQSToLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Invokes Lambda functions with items from SQS queues.
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt [SQSToLambdaRole, Arn]
      Runtime: nodejs4.3
      Timeout: 300
      Code:
        ZipFile:
          Fn::Sub: |
            var CONFIG = "${QueueToFunctionMapping}".split(",");
            var ONCE = "${Frequency}" === "1Minute";
            function e(n,o,a,t){return a()<5e3?t():""==n||""==o?t():void s.receiveMessage({QueueUrl:n,MaxNumberOfMessages:1,WaitTimeSeconds:1},function(s,u){return s?(console.log(s),t()):u.Messages&&0!==u.Messages.length?void i.invoke({FunctionName:o,InvocationType:"Event",Payload:JSON.stringify({source:"aws.sqs",QueueUrl:n,Message:u.Messages[0]})},function(s){return s?(console.log(s),t()):e(n,o,a,t)}):r?t():e(n,o,a,t)})}var n=require("aws-sdk"),s=new n.SQS,i=new n.Lambda,o=CONFIG,r=ONCE;exports.handler=function(n,s,i){if(0===o.length)return i();for(var r=o.length/2,a=function(){r-=1,0==r&&i()},t=0;t<o.length;t+=2)e(o[t],o[t+1],s.getRemainingTimeInMillis,a)};
